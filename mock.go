// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

package httperr

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockError is a mock of Error interface
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockError) EXPECT() *MockErrorMockRecorder {
	return _m.recorder
}

// Error mocks base method
func (_m *MockError) Error() string {
	ret := _m.ctrl.Call(_m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (_mr *MockErrorMockRecorder) Error() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockError)(nil).Error))
}

// HTTPStatusCode mocks base method
func (_m *MockError) HTTPStatusCode() int {
	ret := _m.ctrl.Call(_m, "HTTPStatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// HTTPStatusCode indicates an expected call of HTTPStatusCode
func (_mr *MockErrorMockRecorder) HTTPStatusCode() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HTTPStatusCode", reflect.TypeOf((*MockError)(nil).HTTPStatusCode))
}
